name: Release zip (gh cli)

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  zip:
    name: Build release artefacts
    runs-on: ubuntu-latest
    outputs:
      deployment_allowed: ${{ steps.main_target.outputs.on_main }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Ensure tag points to main
        id: main_target
        run: |
          set -euo pipefail
          git fetch origin main
          if git merge-base --is-ancestor origin/main "${GITHUB_SHA}"; then
            echo "on_main=true" >> "${GITHUB_OUTPUT}"
          else
            echo "on_main=false" >> "${GITHUB_OUTPUT}"
          fi

      - name: Install shopware-cli
        uses: shopware/shopware-cli-action@v1

      - name: Determine extension version
        id: version
        run: echo "EXTENSION_VERSION=$(shopware-cli extension get-version .)" >> $GITHUB_ENV

      - name: Build versioned zip
        run: shopware-cli extension zip . --git-commit "${{ github.sha }}" --release --filename "Foerdebaumarkt-${EXTENSION_VERSION}.zip"

      - name: Create unversioned alias
        run: cp "Foerdebaumarkt-${EXTENSION_VERSION}.zip" Foerdebaumarkt.zip

      - name: Validate archive
        run: shopware-cli extension validate "Foerdebaumarkt-${EXTENSION_VERSION}.zip"

      - name: Upload artefacts
        uses: actions/upload-artifact@v4
        with:
          name: Foerdebaumarkt
          retention-days: 2
          path: |
            Foerdebaumarkt-${EXTENSION_VERSION}.zip
            Foerdebaumarkt.zip

      - name: Ensure GitHub release exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          notes_file=$(mktemp)
          note="Automated release for ${GITHUB_REF_NAME}\n\n## Download\n- Foerdebaumarkt-${EXTENSION_VERSION}.zip\n\n> The \"Source code\" archives are automatically generated by GitHub and do not contain the packaged plugin.\n"
          printf '%s' "$note" > "$notes_file"

          if ! gh release view "$GITHUB_REF_NAME" >/dev/null 2>&1; then
            gh release create "$GITHUB_REF_NAME" \
              --title "$GITHUB_REF_NAME" \
              --notes-file "$notes_file"
          else
            gh release edit "$GITHUB_REF_NAME" \
              --notes-file "$notes_file"
          fi

      - name: Upload plugin zip to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload "${{ github.ref_name }}" "Foerdebaumarkt-${EXTENSION_VERSION}.zip" --clobber

  deploy_plugin:
    name: Deploy Foerde plugin to production
    needs: zip
    if: ${{ success() && needs.zip.outputs.deployment_allowed == 'true' }}
    runs-on: ubuntu-latest
    environment:
      name: Production
    permissions:
      contents: read
    steps:
      - name: Download packaged plugin
        uses: actions/download-artifact@v4
        with:
          name: Foerdebaumarkt
          path: artifact

      - name: Prepare plugin archive
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f artifact/Foerdebaumarkt.zip ]; then
            echo "Foerdebaumarkt.zip missing from artifact download" >&2
            ls -R artifact >&2 || true
            exit 1
          fi
          mv artifact/Foerdebaumarkt.zip Foerdebaumarkt.zip

      - name: Deploy Foerde plugin via shopware-cli container
        uses: docker://shopware/shopware-cli:latest
        env:
          SHOPWARE_URL: ${{ secrets.SHOPWARE_URL }}
          SHOPWARE_ACCESS_KEY_ID: ${{ secrets.SHOPWARE_ACCESS_KEY_ID }}
          SHOPWARE_SECRET_ACCESS_KEY: ${{ secrets.SHOPWARE_SECRET_ACCESS_KEY }}
          PLUGIN_NAME: Foerdebaumarkt
        with:
          entrypoint: /bin/sh
          args: |-
            -c "set -e
            if [ -z \"${SHOPWARE_URL}\" ]; then
              echo \"Missing required secret: SHOPWARE_URL\" >&2
              exit 1
            fi
            if [ -z \"${SHOPWARE_ACCESS_KEY_ID}\" ]; then
              echo \"Missing required secret: SHOPWARE_ACCESS_KEY_ID\" >&2
              exit 1
            fi
            if [ -z \"${SHOPWARE_SECRET_ACCESS_KEY}\" ]; then
              echo \"Missing required secret: SHOPWARE_SECRET_ACCESS_KEY\" >&2
              exit 1
            fi
            shopware-cli project logout production >/dev/null 2>&1 || true
            shopware-cli project login --alias production --url \"$SHOPWARE_URL\" --client-id \"$SHOPWARE_ACCESS_KEY_ID\" --client-secret \"$SHOPWARE_SECRET_ACCESS_KEY\"
            shopware-cli project use production
            shopware-cli project extension upload Foerdebaumarkt.zip
            shopware-cli project console plugin:refresh
            if ! shopware-cli project extension install \"$PLUGIN_NAME\" --activate; then
              shopware-cli project extension update \"$PLUGIN_NAME\"
              shopware-cli project extension activate \"$PLUGIN_NAME\"
            fi
            shopware-cli project console assets:install --force
            shopware-cli project console bundle:dump
            shopware-cli project console cache:clear
            shopware-cli project console theme:refresh
            shopware-cli project console theme:compile
            shopware-cli project logout production >/dev/null 2>&1 || true
      - name: Cleanup workspace
        if: always()
        shell: bash
        run: |
          rm -f Foerdebaumarkt.zip
          rm -rf artifact
