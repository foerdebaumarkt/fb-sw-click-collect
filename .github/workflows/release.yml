name: Release Plugin Package

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  package:
    name: Build release artefacts
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect default branch
        id: default_branch
        run: |
          set -euo pipefail
          git remote set-head origin -a >/dev/null 2>&1 || true
          ref=$(git symbolic-ref refs/remotes/origin/HEAD || echo "refs/remotes/origin/main")
          ref=${ref#refs/remotes/origin/}
          echo "name=$ref" >> "${GITHUB_OUTPUT}"

      - name: Ensure tag points to default branch
        id: main_target
        run: |
          set -euo pipefail
          default_branch="${{ steps.default_branch.outputs.name }}"
          git fetch origin "${default_branch}"
          if git merge-base --is-ancestor "origin/${default_branch}" "${GITHUB_SHA}"; then
            echo "on_main=true" >> "${GITHUB_OUTPUT}"
          else
            echo "on_main=false" >> "${GITHUB_OUTPUT}"
          fi

      - name: Abort when tag is not on default branch
        if: steps.main_target.outputs.on_main != 'true'
        run: |
          echo "Tag ${GITHUB_REF_NAME} must reference the default branch (origin/${{ steps.default_branch.outputs.name }})" >&2
          exit 1

      - name: Determine plugin metadata
        id: metadata
        run: |
          set -euo pipefail
          plugin_name=$(jq -r '.extra["shopware-plugin-class"] // empty' composer.json)
          if [ -n "${plugin_name}" ]; then
            plugin_name=${plugin_name##*\\}
          else
            plugin_name=$(jq -r '.name // empty' composer.json)
            plugin_name=${plugin_name##*/}
          fi
          plugin_name=${plugin_name%%.php}
          sanitized=$(printf '%s' "${plugin_name}" | tr -cd '[:alnum:]_-')
          if [ -z "${sanitized}" ]; then
            echo "Unable to determine plugin name from composer.json" >&2
            exit 1
          fi
          echo "PLUGIN_NAME=${sanitized}" >> "${GITHUB_ENV}"
          echo "plugin_name=${sanitized}" >> "${GITHUB_OUTPUT}"

      - name: Install shopware-cli
        uses: shopware/shopware-cli-action@v1

      - name: Determine extension version
        id: version
        run: |
          set -euo pipefail
          version=$(shopware-cli extension get-version .)
          echo "EXTENSION_VERSION=${version}" >> "$GITHUB_ENV"
          echo "extension_version=${version}" >> "$GITHUB_OUTPUT"

      - name: Build versioned zip
        run: shopware-cli extension zip . --git-commit "${{ github.sha }}" --release --filename "${PLUGIN_NAME}-${EXTENSION_VERSION}.zip"

      - name: Create unversioned alias
        run: cp "${PLUGIN_NAME}-${EXTENSION_VERSION}.zip" "${PLUGIN_NAME}.zip"

      - name: Validate archive
        run: shopware-cli extension validate "${PLUGIN_NAME}-${EXTENSION_VERSION}.zip"

      - name: Upload artefacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.metadata.outputs.plugin_name }}
          retention-days: 2
          path: |
            ${{ steps.metadata.outputs.plugin_name }}-${{ steps.version.outputs.extension_version }}.zip
            ${{ steps.metadata.outputs.plugin_name }}.zip

      - name: Ensure GitHub release exists
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          notes_file=$(mktemp)
          note="Automated release for ${GITHUB_REF_NAME}\n\n## Download\n- ${PLUGIN_NAME}-${EXTENSION_VERSION}.zip\n\n> The \"Source code\" archives are automatically generated by GitHub and do not contain the packaged plugin.\n"
          printf '%s' "$note" > "$notes_file"

          if ! gh release view "$GITHUB_REF_NAME" >/dev/null 2>&1; then
            gh release create "$GITHUB_REF_NAME" \
              --title "$GITHUB_REF_NAME" \
              --notes-file "$notes_file"
          else
            gh release edit "$GITHUB_REF_NAME" \
              --notes-file "$notes_file"
          fi

      - name: Upload plugin zip to release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release upload "${{ github.ref_name }}" "${PLUGIN_NAME}-${EXTENSION_VERSION}.zip" --clobber
